[user]
	name = Joseph D. Purcell
	email = josephdpurcell@gmail.com
[core]
    quotepath = false
	autocrlf = input
	path = /usr/libexec/git-core
	excludesfile = /home/joep/.gitignore
	fileMode = false
[alias]
    st = status -sb
    ci = commit
    br = branch
    co = checkout
    d = diff
    dc = diff --cached
    dw = diff --word-diff
    dcw = diff --cached --word-diff
    #hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
    hist = log --graph --oneline --decorate --date=short
    #hist = log --graph --oneline --decorate --all --date=short
    type = cat-file -t
    dump = cat-file -p
    unstage = reset HEAD
    rl = reflog --date=iso
    wc = whatchanged
    tg = tag -n1
    tgg = "!f() { for c in $(git for-each-ref refs/tags/ --format='%(refname)'); do echo \"\"; git for-each-ref $c --format=${c:10}' %(subject)'; git log -1 --pretty=short \"$c\"; done }; f"
    l = log --oneline
    ll = log
    lll = log --pretty=fuller --stat
    bl = branch-list -o -committerdate
    # my istage isn't nearly as cool as git add -ip
    #sgi = istage
    sgi = add -ip
    istage = add -ip
    sga = add .
    sg = stage
    sl = stash list
    sll = stash-list
    slll = !sh -c \"git stash show -p stash@{$1}\" -
    sa = !sh -c \"git stash apply stash@{$1}\" -
    sd = !sh -c \"git stash drop stash@{$1}\" -
    ss = "!f() { if [ -z $1 ]; then echo \"You must specify a stash name.\"; else git stash save $1; fi }; f"
    ssa = "!f() { if [ -z $1 ]; then echo \"You must specify a stash name.\"; else git stash save --include-untracked $1; fi }; f"
    sp = stash pop
    # this doesn't work bc you can't edit a prior commmit, only the most recent
    #change-date = "!f() { if [[ -z $1 ]] || [[ -z $2 ]]; then echo \"You must specify a date and commit hash:\ngit commit-date 'Thu Apr 17 10:06:40 2013 -0400' 911b21b4594dbfcdf461d12a0bf6e0d844ac0239\"; else env GIT_COMMITTER_DATE=\"$1\" git commit --amend -C \"$2\" --date=\"$1\"; fi }; f"
    change-date = "!f() { if [[ -z $1 ]]; then echo \"You must specify a date:\n$ git change-date 'Thu Apr 17 10:06:40 2013 -0400'\"; else env GIT_COMMITTER_DATE=\"$1\" git commit --amend --no-edit --date=\"$1\"; fi }; f"
    change-author = "!f() { if [[ -z $1 ]]; then echo \"You must specify a name and email:\n$ git change-author 'Joe Person' 'joe@person.com'\"; else env GIT_COMMITTER_NAME=\"$1\" GIT_COMMITTER_EMAIL=\"$2\" git commit --amend --no-edit --author \"$1 <$2>\"; fi }; f"
    #compare = !sh -c \"git log --oneline --no-merges HEAD ^$1\" -
    # this doesnt work no matter how much I pretend it does:
    #vim = !sh -c \"vim -O `git diff-tree --no-commit-id --name-only -r $1 | tr '\n' ' '`\" -
    # remember this trick to show older version of a file:
    # git show HEAD^:main.cpp > old_main.cpp
    # Source: http://stackoverflow.com/a/888623
    add-pushable-hooks = "!f() { git config receive.denyCurrentBranch ignore;DIR=`git rev-parse --show-toplevel`;echo '#!'\"/bin/bash\ncd ..\nenv -i git reset --hard\" > $DIR/.git/hooks/post-receive;chmod +x $DIR/.git/hooks/post-receive; }; f"
    # See how much work I did to make me feel good:
    # git log --numstat --pretty="%H" --author="Joseph" 1f28eb37c8beba80e2a3f314c7193f68b2bbb046..04290eafa4e685a2072fbd6672da39c0d581b7a5 | awk 'NF==3 {plus+=$1; minus+=$2} END {printf("+%d, -%d\n", plus, minus)}'
    # Source: http://stackoverflow.com/a/2528129
    branch-owners = "!f() { git for-each-ref --format='%(committerdate) %09 %(authorname) %09 %(refname)' | sort -k5n -k2M -k3n -k4n; }; f"
    # Source: http://stackoverflow.com/a/25815116/990642
    reset-authors = "!f() { if [[ -z $1 ]]; then echo \"You must specify a hash to reset all commits from HEAD to that commit:\n$ git reset-author cbcc732\"; else env git rebase -i \"$1\" -x \"git commit --amend --reset-author -CHEAD\"; fi }; f"
[color]
    ui = true
# tips: http://shallowsky.com/blog/programming/gitcolors.html
[color "diff"]
    plain = white normal
    #meta = yellow normal
    #frag = magenta normal
    old = red normal
    new = green normal
    commit = yellow
    #whitespace = white blink
[pull]
	rebase = true
[merge]
	ff = false
[push]
	default = matching
