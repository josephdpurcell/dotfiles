
function __mysqlimport ()
{
    echo "mysql -u root -p the_database < file_to_import.sql"
}

__get_incremented_filename ()
{
    local file
    local filename
    local extension
    local increment
    local limit
    file=$1
    filename=$(basename "$file")
    extension="${filename##*.}"
    filename="${filename%.*}"
    increment="${filename##*_}"
    filename_wo_increment="${filename%_*}"
    limit=1000
    # since the suffix might be something like a date or a timestamp, limit the incrementer to 1000
    # source: http://mywiki.wooledge.org/BashFAQ/054
    if echo "$increment" | egrep '^[-+]?([0-9]+\.?|[0-9]*\.[0-9]+)$' >/dev/null
    then
        if [ $increment -lt $limit ]
        then
            increment=$((increment + 1))
            echo $filename_wo_increment'_'$increment'.'$extension
            return 0
        else
            # there is no extension yet
            increment=2
            echo  $filename'_'$increment'.'$extension
            return 0
        fi
    else
        # there is no extension yet
        increment=2
        echo  $filename'_'$increment'.'$extension
        return 0
    fi
}

__get_filename_with_date ()
{
    local file
    local filename
    local extension
    local date
    local timestamp
    file=$1
    filename=$(basename "$file")
    extension="${filename##*.}"
    filename="${filename%.*}"
    timestamp=`stat -f "%m" $file`
    date=`echo $timestamp | gawk '{ print strftime("%Y%m%d", $0); }'`
    echo $filename'-'$date'.'$extension
}

__mv_file_to_file_with_date ()
{
    local newfilename
    local file
    file=$1
    if [ ! -f $file ]
    then
        echo "$file: No such file or directory"
    else
        path=`dirname $file`
        filename=$(basename "$file")
        newfilename=`__get_filename_with_date $file`
        oldfile="$path/$filename"
        newfile="$path/$newfilename"
        # try 1
        if [ -f $newfile ]
        then
            # try 2
            newfilename=`__get_incremented_filename $newfile`
            newfile="$path/$newfilename"
            if [ -f $newfile ]
            then
                # try 3
                newfilename=`__get_incremented_filename $newfile`
                newfile="$path/$newfilename"
                if [ -f $newfile ]
                then
                    # try 4
                    newfilename=`__get_incremented_filename $newfile`
                    newfile="$path/$newfilename"
                    if [ -f $newfile ]
                    then
                        echo "The __mv_file_to_file_with_date command only supports up to 4 increments! Boo... :("
                    else
                        mv -i $oldfile $newfile
                    fi
                else
                    mv -i $oldfile $newfile
                fi
            else
                mv -i $oldfile $newfile
            fi
        else
            mv -i $oldfile $newfile
        fi
    fi
}

__list_colors ()
{
    # Regular Fonts
    txtblk='\e[0;30m' # Black
    txtred='\e[0;31m' # Red
    txtgrn='\e[0;32m' # Green
    txtylw='\e[0;33m' # Yellow
    txtblu='\e[0;34m' # Blue
    txtpur='\e[0;35m' # Purple
    txtcyn='\e[0;36m' # Cyan
    txtwht='\e[0;37m' # White
    # Bold Fonts
    bldblk='\e[1;30m' # Black
    bldred='\e[1;31m' # Red
    bldgrn='\e[1;32m' # Green
    bldylw='\e[1;33m' # Yellow
    bldblu='\e[1;34m' # Blue
    bldpur='\e[1;35m' # Purple
    bldcyn='\e[1;36m' # Cyan
    bldwht='\e[1;37m' # White
    # Underline Fonts
    unkblk='\e[4;30m' # Black
    undred='\e[4;31m' # Red
    undgrn='\e[4;32m' # Green
    undylw='\e[4;33m' # Yellow
    undblu='\e[4;34m' # Blue
    undpur='\e[4;35m' # Purple
    undcyn='\e[4;36m' # Cyan
    undwht='\e[4;37m' # White
    # Backgrounds
    bakblk='\e[40m'   # Black
    bakred='\e[41m'   # Red
    bakgrn='\e[42m'   # Green
    bakylw='\e[43m'   # Yellow
    bakblu='\e[44m'   # Blue
    bakpur='\e[45m'   # Purple
    bakcyn='\e[46m'   # Cyan
    bakwht='\e[47m'   # White
    txtrst='\e[0m'    # Text Reset

    echo "Regular Fonts:"
    echo $txtblk'	Black'
    echo $txtred'	Red'
    echo $txtgrn'	Green'
    echo $txtylw'	Yellow'
    echo $txtblu'	Blue'
    echo $txtpur'	Purple'
    echo $txtcyn'	Cyan'
    echo $txtwht'	White'

    echo "Bold Fonts:"
    echo $bldblk'	Black'
    echo $bldred'	Red'
    echo $bldgrn'	Green'
    echo $bldylw'	Yellow'
    echo $bldblu'	Blue'
    echo $bldpur'	Purple'
    echo $bldcyn'	Cyan'
    echo $bldwht'	White'

    echo "Underline Fonts:"
    echo $unkblk'	Black'
    echo $undred'	Red'
    echo $undgrn'	Green'
    echo $undylw'	Yellow'
    echo $undblu'	Blue'
    echo $undpur'	Purple'
    echo $undcyn'	Cyan'
    echo $undwht'	White'

    echo "Backgrounds:"
    echo $bakblk'		Black'
    echo $bakred'		Red'
    echo $bakgrn'		Green'
    echo $bakylw'		Yellow'
    echo $bakblu'		Blue'
    echo $bakpur'		Purple'
    echo $bakcyn'		Cyan'
    echo $bakwht'		White'
    echo $txtrst'		Text Reset'
}

__bash_shortcuts ()
{
    echo '
    ____________CTRL Key Bound_____________
    Ctrl + a - Jump to the start of the line
    Ctrl + b - Move back a char
    Ctrl + c - Terminate the command
    Ctrl + d - Delete from under the cursor
    Ctrl + e - Jump to the end of the line
    Ctrl + f - Move forward a char
    Ctrl + k - Delete to EOL
    Ctrl + l - Clear the screen
    Ctrl + r - Search the history backwards
    Ctrl + R - Search the history backwards with multi occurrence
    Ctrl + u - Delete backward from cursor
    Ctrl + xx - Move between EOL and current cursor position
    Ctrl + x @ - Show possible hostname completions
    Ctrl + z - Suspend/ Stop the command

    ____________ALT Key Bound___________
    Alt + < - Move to the first line in the history
    Alt + > - Move to the last line in the history
    Alt + ? - Show current completion list
    Alt + * - Insert all possible completions
    Alt + / - Attempt to complete filename
    Alt + . - Yank last argument to previous command
    Alt + b - Move backward
    Alt + c - Capitalize the word
    Alt + d - Delete word
    Alt + f - Move forward
    Alt + l - Make word lowercase
    Alt + n - Search the history forwards non-incremental
    Alt + p - Search the history backwards non-incremental
    Alt + r - Recall command
    Alt + t - Move words around
    Alt + u - Make word uppercase
    Alt + back-space - Delete backward from cursor

    ----------------More Special Keybindings-------------------

    Here "2T" means Press TAB twice

    $ 2T - All available commands(common)
    $ (string)2T - All available commands starting with (string)
    $ /2T - Entire directory structure including Hidden one
    $ 2T - Only Sub Dirs inside including Hidden one
    $ *2T - Only Sub Dirs inside without Hidden one 
    $ ~2T - All Present Users on system from "/etc/passwd"
    $ $2T - All Sys variables
    $ @2T - Entries from "/etc/hosts"
    $ =2T - Output like ls or dir
    '
}

# This function allows you to browse the internet through another IP (that
# you have access to).
#
# = INSTRUCTIONS =
#
# I. Setup
#
# 1. create a profile in Firefox called "tunnel" (can be done on first call of this fn)
# 2. Change network settings to have manual proxy with SOCKS Host as localhost on port 1080
#
# II. Usage
#
# 1. Run `ssh -CND 1080 user@remoteserver.com` and leave that command open
# 2. Run this function, `__firefox_tunnel`
#
# III. Tips
#
# 1. make an alias for this function: alias='fftunnel'
# 2. make an alias for the SSH command: alias='ssh -CDN user@remoteserver.com`
# 3. don't add a '&' on the end and leave SSH open so you can kill it, and
#   if the connection drops you won't have 50 million SSH connections running
#
__firefox_tunnel ()
{
    if [ -x '/Applications/Firefox.app/Contents/MacOS/firefox-bin' ]; then
        `/Applications/Firefox.app/Contents/MacOS/firefox-bin -P tunnel -no-remote`
    fi
}

__firefox ()
{
    if [ -x '/Applications/Firefox.app/Contents/MacOS/firefox-bin' ]; then
        `/Applications/Firefox.app/Contents/MacOS/firefox-bin -P default -no-remote`
    fi
}

# Usage:
# __copy_dotfiles user@server.com:
#
# TODO: make interactive
__scp_dotfiles ()
{
    local ALL="false"
    local USER_HOME=`echo ~`
    local BASE_FILES=".bash_includes .vim .vimrc .gitconfig .gitignore .inputrc .bashrc .bash_profile .profile"
	local SERVER=`echo "$1" | sed "s/:.*$//g"`
	local REMOTE_PATH=":"
    local PORT=22

    if [ "$2" = "-p" ]
    then
        PORT=$3
    elif [ ! -z "$2"]
    then
		echo "Usage:"
		echo "__scp_dotfiles user@server.com:"
		exit 1
    fi

    if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]
    then
		echo "Usage:"
		echo "__scp_dotfiles user@server.com:"
		exit 1
    else
		echo "Getting list of dot files..."
		FILES=""
        for x in $BASE_FILES
        do
			if [ -f "$x" ] || [ -d "$x" ]
			then
				echo "    "$x
				FILES=$FILES" $x"
			fi
		done

        echo "Copying dot files to $SERVER..."
        for x in $FILES
        do
            COPY="false"
            x="$USER_HOME/$x"
            if [ "$ALL" = "true" ]; then
                answer="y"
            else
                read -p "Do you want to copy $x? " answer
            fi

            case "$answer" in
                [yY1] | 'yes' )
                    COPY="yes";;
                [nN0] | 'no' )
                    echo "Skipping $x";;
                [aA] | 'all' )
                    echo "Copying all"
                    COPY="yes"
                    ALL="true";;
                [xXeE] | 'exit' )
                    echo "Exiting";
					return 1;;
                * )
                    echo "Invalid response";
					return 1;;
            esac

            if [ "$COPY" = "yes" ]; then
                if [ -f $x ]; then
                    scp -P $PORT $x $SERVER$REMOTE_PATH
                elif [ -d $x ]; then
                    scp -P $PORT -r $x $SERVER$REMOTE_PATH
                else
                    echo "FATAL ERROR: file not found";
					return 1;
                    break;
                fi
            fi
        done
    fi
	echo "Done"
	return
}
__scp_dotfiles_beta ()
{
    local ALL="false"
    local USER_HOME=`echo ~`
    local FILES=".bashrc .bash_profile .profile .bash_includes .vim .vimrc .gitconfig .gitignore .inputrc"
    local COPY_SUBDIR="false"

    if [ -z "$1" ]
    then
        printf "You must specify the server to copy to, i.e. user@server.com:.\n\n\t* NOTE: you will want to keep the ':' to copy to the user's home directory.\n\n"
    else
        echo "Copying dot files to $1..."

        for x in $FILES
        do
            x="$USER_HOME/$x"
            if [ "$ALL" = "true" ]; then
                answer="y"
            else
                read -p "Do you want to copy $x? " answer
            fi

            case "$answer" in
                [yY1] | 'yes' )
                    if [ -f $x ]; then
                        scp $x $1
                    elif [ -d $x ]; then
                        scp -r $x $1
                        #COPY_SUBDIR="true"
                    else
                        echo "FATAL ERROR: file not found"
                        break
                    fi
                    echo "done";;
                [nN0] | 'no' )
                    echo "Skipping $x";;
                [aA] | 'all' )
                    echo "Copying all"
                    ALL="true";;
                [xXeE] | 'exit' )
                    echo "Exiting"
                    break;;
                * )
                    echo "Invalid response";;
            esac

            if [ "$COPY_SUBDIR" = "true" ]; then
                SUBDIR=$x"/*"
                for y in $SUBDIR
                do
                    if [ "$ALL2" = "true" ]; then
                        answer2="y"
                    else
                        read -p "Do you want to copy $y? " answer2
                    fi

                    case "$answer2" in
                        [yY1] | 'yes' )
                            if [ -f $y ]; then
                                scp $y $1
                            elif [ -d $y ]; then
                                scp -r $y $1
                            else
                                echo "FATAL ERROR: file not found"
                                break
                            fi;;
                        [nN0] | 'no' )
                            echo "Skipping $y";;
                        [aA] | 'all' )
                            echo "Copying all"
                            ALL2="true";;
                        [xXeE] | 'exit' )
                            echo "Exiting"
                            break;;
                        * )
                            echo "Invalid response";;
                    esac
                done
            fi
        done
    fi
}

# Usage:
# __copy_dotfiles user@server.com:
#
# TODO: make interactive
__cp_dotfiles()
{
    if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]
    then
        # nothing was given
        echo "__cp_dotfiles v1.0"
        echo "This function is good for interactively copying your dotfiles to a directory on"
        echo "the local system."
        echo ""
        echo "Usage:"
        echo "__cp_dotfiles ~/ ./my_dotfiles"
        return
    fi

    local FROM=`echo $1 | sed "s/\/$//g"`
    local TO=$2
    local ALL="false"
    local CP=`which cp`

    if [ ! -d "$FROM" ]
    then
        echo "FATAL ERROR: source is not a directory"
        return
    fi

    if [ ! -d "$TO" ]
    then
        echo "FATAL ERROR: destination is not a directory"
        return
    fi

    echo "Copying files to $TO..."
    FILES=`ls -ld1 $FROM/.??*`
    for file in $FILES
    do
        if [ "$ALL" = "true" ]; then
            answer="y"
        else
            read -p "Do you want to copy $file? " answer
        fi

        case "$answer" in
            [yY1] | 'yes' )
                if [ -f "$file" ]; then
                    echo -n "Copying $file..."
                    $CP -f $file $TO
                elif [ -d "$file" ]; then
                    echo -n "Copying $file..."
                    $CP -rf $file $TO
                else
                    echo "FATAL ERROR: file not found: "$x
                    break
                fi
                echo " Done";;
            [nN0] | 'no' )
                echo "Skipping $file";;
            [aA] | 'all' )
                echo "Copying all"
                ALL="true";;
            [xXeE] | 'exit' )
                echo "Exiting"
                break;;
            * )
                echo "Invalid response";;
        esac
    done
}

# an example of how to batch compress
# TODO: modify this to batch a list of files in certain MB chunks
__batch_compress()
{
    FILES=''
    COUNT=0
    SET=0
    COMPRESSION='zip'
    for x in *
    do
        COUNT=$(($COUNT+1))
        FILES=$FILES" $x"
        if [ $COUNT = 4 ]
        then
            SET=$(($SET+1))
            echo $file
            if [ $COMPRESSION = 'zip' ]
            then
                file="files$SET.zip"
                zip $file $FILES
            else
                file="files$SET.tgz"
                tar czvf $file $FILES
            fi
            FILES=''
            COUNT=0
        fi
    done
}

# Source: http://jeroenjanssens.com/2013/08/16/quickly-navigate-your-filesystem-from-the-command-line.html
export MARKPATH=$HOME/.marks
function jump { 
    cd -P "$MARKPATH/$1" 2>/dev/null || echo "No such mark: $1"
}
function mark { 
    mkdir -p "$MARKPATH"; ln -s "$(pwd)" "$MARKPATH/$1"
}
function unmark { 
    rm -i "$MARKPATH/$1"
}
if [ `uname -s` = 'Darwin' ]; then
    function marks {
        \ls -l "$MARKPATH" | tail -n +2 | sed 's/  / /g' | cut -d' ' -f9- | awk -F ' -> ' '{printf "%-10s -> %s\n", $1, $2}'
    }
    _completemarks() {
        local curw=${COMP_WORDS[COMP_CWORD]}
        local wordlist=$(find $MARKPATH -type l -name "b*" | awk -F/ '{print $NF}')
        COMPREPLY=($(compgen -W '${wordlist[@]}' -- "$curw"))
        return 0
    }
else
    function marks {
        ls -l "$MARKPATH" | sed 's/  / /g' | cut -d' ' -f9- | sed 's/ -/\t-/g' && echo
    }
    _completemarks() {
        local curw=${COMP_WORDS[COMP_CWORD]}
        local wordlist=$(find $MARKPATH -type l -printf "%f\n")
        COMPREPLY=($(compgen -W '${wordlist[@]}' -- "$curw"))
        return 0
    }
fi
complete -F _completemarks jump unmark

