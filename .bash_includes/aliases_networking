# .aliases_networking
#
alias telnet_https='openssl s_client -connect stmts.chase.com:443'
# Note: "ping" is an alias on Fedora, so it won't retry by default
alias ping8='/bin/ping -O 8.8.8.8'
alias pingg='/bin/ping -O www.google.com'
function digall() {
    dig +nocmd $@ any +multiline +noall +answer
}

# Finding IPs
alias lsip='arp -a'
__lsip ()
{
    echo "Pining all IP addresses on the network to clear ARP cache."
    for ip in 10.0.1.{1..254}; do
        ping -c 1 $ip | grep "64 bytes" &
    done
    sleep 1
    arp -a
}
__lsip2 ()
{
    sudo arp-scan 192.168.1.0/24
}
__lsip3 ()
{
    nmap -sP 192.168.1.0/24
}

# Finding MACs
alias lsmac='arp -n'

# Discovery on an IP
# Find the IP's operating system, also tons of other info like open ports:
# sudo nmap -O remote_host
# See also:
#   https://www.digitalocean.com/community/tutorials/how-to-use-nmap-to-scan-for-open-ports-on-your-vps

# Finding open ports
if [ `uname -s` = 'Darwin' ]; then
    # http://stackoverflow.com/a/21295146/990642
    alias lsports='sudo lsof -i -n -P | head -1 && sudo lsof -i -n -P | grep LISTEN | sort'
    # maybe this is better: lsof -i 4 -a
else
    # http://www.cyberciti.biz/faq/what-process-has-open-linux-port/
    alias lsports='netstat -tulpn'
fi
alias lsports2='lsof -i'

# use this to test if you can transfer data over a port (i.e. test if a port is open)
alias catport='echo -e "On the server run:\n$ nc -l 88\nThen, on the client run:\n$ nc -u 192.168.0.9 88"'
alias catudpport='echo -e "On the server run:\n$ nc -u -l 88\nThen, on the client run:\n$ nc -u 192.168.0.9 88"'

# sniffing
# ref: http://www.danielmiessler.com/study/tcpdump/
alias tcpdump_dns='sudo tcpdump -i en1 "udp port 53"'
alias tcpdump_http='sudo tcpdump -i en1 "tcp port 80 and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)"';
alias tcpdump_smtp='sudo tcpdump -i en0 tcp port 25';
alias tcpdump_http_nonack="tcpdump -nnvi any 'tcp port 80 and (tcp[tcpflags] & tcp-ack == 0)'"
alias tcpdump_https_nonack="tcpdump -nnvi any 'tcp port 443 and (tcp[tcpflags] & tcp-ack == 0)'"
# all packets:
# tcpdump -i any -nnASs 0 'port 80'

# iptables
alias iptl='iptables --list --line-numbers --numeric'

# Always print headers
# Source: http://attilaolah.eu/2014/12/18/my-curl-alias/
alias c="curl -s --dump-header /dev/stderr"

# Tunnel 127.0.0.1 8080 to route through the current vagrant machine via SSH.
# e.g. if vagrant machine has a VPN, you can use this to SOCK5 proxy a browser through the vagrant machine's vpn
alias tunnelvagrant="ssh \$(vagrant ssh-config | awk '{print \" -o \"\$1\"=\"\$2}') -CND 8080 localhost"


# Ubuntu 16.04 wifi doesn't work:
# sudo ifconfig wlp4s0 up
# service network-manager restart
